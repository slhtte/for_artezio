В качестве примера возьмем самый популярный пример - программу, позволяющую создавать и в последущем изменять геометрические фигуры.

Базовым классаом всех фигур будет класс "Shape", в котором определим чисто виртуальные функции, такие как: Set_Color() и Move().Деструктор тоже сделаем virtual.

При создании объектов дочерних классов, таких как, например Circle и Square, будут вызываться соответственно их конструкторы.

Далее, при работе с программой нам можем понадобиться создать большое количсетво разных фигур (которые будут отличаться размерами и т.д.). Затем, к примеру, нам будет нужно каждую из них закрасить.

В этом случае нам следует поместить указатели на эти фигуры как указатели базового класса в один контейнер, например в vector<Shape>.

Затем, в цикле for() мы просто вызываем виртуальную функцию Set_Color() для каждого элемента контейнера. Комплятор через таблицу виртуальных функций применит функцию Set_Color() именно так, как нужно нам, благодаря тому, что в каждом дочернем классе мы реализовали виртуальную функцию Set_color() с нужной нам сигнатурой.

После окончания работы с контейнером фигур, мы может уничтожить каждую из них, использую все тот же цикл for(), вызывая деструктор для каждого элемента. Так, как деструктор виртуальный, все фигуры будут удалены правильно, и утечки памяти не возникнет.